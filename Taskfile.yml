version: '3'

dotenv:
  - .env

silent: true

tasks:

  generate:dot:env:
    desc: Generate .env based on .env.example
    summary: |
      Generate .env based on .env.example
      This will override your existing .env
      ‚ÑπÔ∏è Generating .env file from .env.example\n
      run this like so:
        DOT_CONFIG_REPO={{.DOT_CONFIG_REPO}} \\n
        USER_FULL_NAME={{.USER_FULL_NAME}} \\n
        USER_EMAIL={{.USER_EMAIL}} \\n
        USER_SIGNING_KEY={{.USER_SIGNING_KEY}} \\n
        task generate:dot_env
    silent: false
    generates:
      - .env
    requires:
      vars: [ USER_FULL_NAME, USER_EMAIL, DOT_CONFIG_REPO, USER_SIGNING_KEY ]
    cmds:
    - |

      if [ -f .env ]; then
        echo "‚úÖ .env already exists"
      else
        cat<<EOF>.env
        USER_FULL_NAME={{.USER_FULL_NAME}}
        USER_EMAIL={{.USER_EMAIL}}
        DOT_CONFIG_REPO={{.DOT_CONFIG_REPO}}
        USER_SIGNING_KEY={{.USER_SIGNING_KEY}}
      EOF
        test -f .env && echo -e "‚úÖ .env successfully generated"
      fi

  # xcode
  xcode:rosetta:
    desc: Install Xcode CLI tools
    platforms: [darwin]
    cmds:
      - softwareupdate --install-rosetta

  # bash
  bash:dot_config:get:
    requires:
      vars: [ DOT_CONFIG_REPO ]
    desc: Get dot_config from repo
    dir: ~/.config
    generates:
      - ~/.config/
    cmds:
      - test -d ~/.config || git clone $DOT_CONFIG_REPO ~/.config && echo "‚úÖ ~/.config exists"
      - git remote -v | grep $DOT_CONFIG_REPO
      - git fetch
      - git checkout main

  bash:xdg-setup:
    summary: |
      Setup .config on a new machine.
      git clone this repo into ~/.config
      cd ~/.config and run this task
    cmds:
      - test -d "$HOME/.config" || mkdir -p "$HOME/.config"
      - test -d "$HOME/.cache" || mkdir -p "$HOME/.cache"
      - test -d "$HOME/.local/share" || mkdir -p "$HOME/.local/share"
      - test -d "$HOME/.local/state" || mkdir -p "$HOME/.local/state"
      - test -L ~/.bash_env || ln -s ~/.config/bash/env ~/.bash_env && echo "‚úÖ bash env link exists"
      - test -L ~/.bashrc || ln -s ~/.config/bash/rc ~/.bashrc && echo "‚úÖ bashrc link exists"
      - test -L ~/.bash_profile || ln -s ~/.config/bash/profile ~/.bash_profile && echo "‚úÖ bash profile link exists"

  # Homebrew

  brew:
    dir: &brewfiledir ~/.config
    desc: Manage Homebrew operations
    cmds:
      - task: brew:status

  brew:status:
    dir: *brewfiledir
    desc: Check Brewfile status and show outdated packages
    cmds:
      - brew bundle check --verbose
      - brew outdated

  brew:dump:
    dir: *brewfiledir
    desc: Update Brewfile with current packages
    cmds:
      - brew bundle dump --force --file Brewfile
      - echo "‚úÖ Brewfile has been updated"

  brew:install:
    dir: *brewfiledir
    desc: Install all dependencies from Brewfile
    cmds:
      - brew bundle install --file Brewfile
      - echo "‚úÖ Brewfile has been used for install"

  brew:commit:
    dir: *brewfiledir
    desc: Commit Brewfile to git
    cmds:
      - |
        if git diff --quiet Brewfile; then
          echo "‚úÖ No changes to Brewfile"
        else
          git add Brewfile && echo "‚úÖ Brewfile has been added"
          git commit Brewfile -m "chore: Update Brewfile" && echo "‚úÖ Brewfile has been committed"
          git push origin main && echo "‚úÖ Brewfile has been pushed"
        fi

  brew:cleanup:
    dir: *brewfiledir
    desc: Remove unused dependencies
    cmds:
      - brew bundle cleanup --force --file Brewfile
      - echo "‚úÖ System is up2date with Brewfile"

  brew:debug:
    dir: *brewfiledir
    desc: Show Homebrew debug information and Brewfile location
    cmds:
      - echo "Current directory $PWD"
      - echo "Looking for Brewfile in $PWD/Brewfile"
      - test -f Brewfile && echo "‚úÖ Brewfile exists in current directory" || echo "‚ùå No Brewfile in current directory"
      - echo "‚úÖ Homebrew debug information"
      - brew bundle --debug --file Brewfile
      - echo "‚úÖ Homebrew config"
      - brew config

  # Pre-commit

  pre-commit:get:
    desc: "internal | exec - install pre-commit via homebrew"
    cmds:
    - echo "This might take a while on first-run ..."
    - pre-commit help &>/dev/null || brew install pre-commit

  pre-commit:install:
    desc: "internal | configure | pre-commit to local repo"
    deps: [pre-commit:get]
    cmds:
    - pre-commit install

  pre-commit:run:
    desc: "internal | execute | run-all pre-commit run on the staged files (files which are going to be commited)"
    cmds:
    - pre-commit run

  pre-commit:run-all-files:
    desc: "internal | execute | run-all pre-commit against all files"
    cmds:
    - pre-commit run --all-files

  # Git

  git:lfs:
    silent: true
    desc: "internal | install git-lfs"
    cmds:
    - brew install git-lfs
    - git-lfs install
    - git-lfs version && echo "‚úÖ git-lfs installed" || echo "‚ùå git-lfs is not installed"

  git:config:generator:
    desc: "internal | generate git config"
    requires:
      vars: [ USER_EMAIL, USER_FULL_NAME ]
    cmds:
    - git config --global user.name "{{.USER_FULL_NAME}}"
    - git config --global user.email "{{.USER_EMAIL}}"
    - |
      test -n "{{.USER_SIGNING_KEY}}" && git config --global user.signingkey "{{.USER_SIGNING_KEY}}"
      test -n "{{.USER_SIGNING_KEY}}" && git config --global commit.gpgsign true
    - echo "‚úÖ Git config has been set to:"
    - cat ~/.gitconfig

  git:config:from-repo:
    desc: "internal | configure git"
    summary: |
      Copy git config from repo to local machine
      If git config already exists, it will be backed up to ~/.gitconfig.bak
      If git config link already exists, it will be removed
      If git config is different from repo version, it will be updated
      Show the result git config
    cmds:
    - test -f ~/.config/git/.gitconfig && echo "git config exists"
    - test -f ~/.gitconfig && mv ~/.gitconfig ~/.gitconfig.bak || true
    - test -L ~/.gitconfig && echo "git config link exists" || ln -s ~/.config/git/.gitconfig ~/.gitconfig
    - diff ~/.config/git/.gitconfig ~/.gitconfig && echo "git config is up to date"
    - cat ~/.gitconfig

  # gpg

  gnupg:
    desc: "internal | install gnupg"
    cmds:
    - brew install gnupg

  gnupg:validate:
    desc: "internal | validate gnupg"
    requires:
      vars: [ USER_SIGNING_KEY ]
    cmds:
    - gpg --version && echo "‚úÖ gnupg installed" || echo "‚ùå gnupg is not installed"
    - gpg --list-keys | grep -q $USER_SIGNING_KEY && echo "‚úÖ gnupg keys seems valid for user $USER" || echo "‚ùå gnupg is not valid for user $USER"
    - gpg --list-secret-keys | grep -q $USER_SIGNING_KEY && echo "‚úÖ gnupg seems valid for user $USER" || echo "‚ùå gnupg is not valid for user $USER"

  # IDE

  create-vscode-config:
    desc: creates a .vscode/settings.json
    # internal: true
    generates:
    - .vscode/settings.json
    prompt: This will override your existing .vscode ... Do you want to continue?
    cmds:
    - test -d .vscode || mkdir .vscode
    - |
      cat<<EOF>.vscode/settings.json
      {
        "yaml.schemas": {
          "https://taskfile.dev/schema.json": [
            "tasks/*.yaml",
            "Taskfile.yml",
          ]
        }
      }
      EOF

  # AWS

  # AWS credentials tutorial task
  aws:tutorial:credentials:
    desc: "Guide on how to set AWS credentials"
    cmds:
      - |
        echo "To set up AWS credentials, you need to provide the following environment variables:"
        echo ""
        echo "export AWS_ACCESS_KEY_ID='<your-access-key-id>'"
        echo "export AWS_SECRET_ACCESS_KEY='<your-secret-access-key>'"
        echo "# Optionally, you can also provide a session token for temporary credentials"
        echo "export AWS_SESSION_TOKEN='<your-session-token>'"
        echo ""
        echo "Once these are set, run 'task aws:validate:login' to confirm the setup."

  aws:validate:credentials:
    desc: "Validate AWS credentials login"
    cmds:
      - |
        if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
          echo " üö© AWS credentials are not set. Please configure AWS credentials."
          echo " üö© You can do this by running 'aws configure' or by setting the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables."
          echo " üö© You can also run 'task aws-credentials-tutorial' to get more information."
          exit 1
        else
          echo "‚úÖ AWS credentials are set, running 'aws sts get-caller-identity'"
          aws sts get-caller-identity
        fi

  # GCP

  gcp:tutorial:credentials:
    desc: "Guide on how to set GCP credentials"
    cmds:
      - |
        echo "To set up GCP credentials, you need to provide a service account JSON key."
        echo ""
        echo "1. Download the service account JSON key from your GCP console."
        echo "2. Set the following environment variable:"
        echo "export GOOGLE_APPLICATION_CREDENTIALS='<path-to-your-json-key>'"
        echo ""
        echo "Once this is set, run 'task gcp:validate:credentials' to confirm the setup."

  gcp:tutorial:login:
    desc: "Guide on how to login to GCP"
    cmds:
      - gcloud auth login

  gcp:validate:credentials:
    desc: "Validate GCP credentials login"
    cmds:
      - |
        if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
          echo " üö© GCP credentials are not set. Please configure GCP credentials."
          echo " üö© You can do this by running 'gcloud auth login' or by setting the GOOGLE_APPLICATION_CREDENTIALS environment variable."
          echo " üö© You can also run 'task gcp:tutorial:credentials' to get more information."
          exit 1
        else
          echo "GCP credentials are set."
          gcloud auth list
        fi
