version: '3'

dotenv:
  - .env

silent: true

tasks:

  # xcode
  xcode:rosetta:
    desc: Install Xcode CLI tools
    platforms: [darwin]
    cmds:
      - softwareupdate --install-rosetta

  # bash
  bash:dot_config:get:
    # deps:
    #   - var: DOT_CONFIG_REPO
    desc: Get dot_config from repo
    dir: ~/.config
    cmds:
      - git remote -v | grep $DOT_CONFIG_REPO || git clone $DOT_CONFIG_REPO ~/.config
      - git fetch
      - git checkout main

  bash:xdg-setup:
    summary: |
      Setup .config on a new machine.
      git clone this repo into ~/.config
      cd ~/.config and run this task
    cmds:
      - test -d "$HOME/.config" || mkdir -p "$HOME/.config"
      - test -d "$HOME/.cache" || mkdir -p "$HOME/.cache"
      - test -d "$HOME/.local/share" || mkdir -p "$HOME/.local/share"
      - test -d "$HOME/.local/state" || mkdir -p "$HOME/.local/state" 
      - test -L ~/.bash_env || ln -s ~/.config/bash/env ~/.bash_env && echo "✅ bash env link exists"
      - test -L ~/.bashrc || ln -s ~/.config/bash/rc ~/.bashrc && echo "✅ bashrc link exists"
      - test -L ~/.bash_profile || ln -s ~/.config/bash/profile ~/.bash_profile && echo "✅ bash profile link exists"
  # Homebrew

  brew:
    dir: &brewfiledir ~/.config
    desc: Manage Homebrew operations
    cmds:
      - task: brew:status

  brew:status:
    dir: *brewfiledir
    desc: Check Brewfile status and show outdated packages
    cmds:
      - brew bundle check --verbose
      - brew outdated

  brew:dump:
    dir: *brewfiledir
    desc: Update Brewfile with current packages
    cmds:
      - brew bundle dump --force --file Brewfile
      - echo "✅ Brewfile has been updated"

  brew:install:
    dir: *brewfiledir
    desc: Install all dependencies from Brewfile
    cmds:
      - brew bundle install --file Brewfile
      - echo "✅ Brewfile has been used for install"

  brew:commit:
    dir: *brewfiledir
    desc: Commit Brewfile to git
    cmds:
      - |
        if git diff --quiet Brewfile; then
          echo "✅ No changes to Brewfile"
        else
          git add Brewfile && echo "✅ Brewfile has been added"
          git commit -m "Update Brewfile" && echo "✅ Brewfile has been committed"
          git push origin main && echo "✅ Brewfile has been pushed"
        fi

  brew:cleanup:
    dir: *brewfiledir
    desc: Remove unused dependencies
    cmds:
      - brew bundle cleanup --force --file Brewfile
      - echo "✅ System is up2date with Brewfile"
  
  brew:debug:
    dir: *brewfiledir
    desc: Show Homebrew debug information and Brewfile location
    cmds:
      - echo "Current directory $PWD"
      - echo "Looking for Brewfile in $PWD/Brewfile"
      - test -f Brewfile && echo "✅ Brewfile exists in current directory" || echo "❌ No Brewfile in current directory"
      - echo "✅ Homebrew debug information"
      - brew bundle --debug --file Brewfile
      - echo "✅ Homebrew config"
      - brew config

  # Pre-commit

  pre-commit:get:
    desc: "internal | exec - install pre-commit via homebrew"
    cmds:
    - echo "This might take a while on first-run ..."
    - pre-commit help &>/dev/null || brew install pre-commit

  pre-commit:install:
    desc: "internal | configure | pre-commit to local repo"
    deps: [pre-commit:get]
    cmds:
    - pre-commit install

  pre-commit:run:
    desc: "internal | execute | run-all pre-commit run on the staged files (files which are going to be commited)"
    cmds:
    - pre-commit run

  pre-commit:run-all-files:
    desc: "internal | execute | run-all pre-commit against all files"
    cmds:
    - pre-commit run --all-files

  # Git

  git:lfs:
    silent: true
    desc: "internal | install git-lfs"
    cmds:
    - brew install git-lfs
    - git-lfs install
    - git-lfs version && echo "✅ git-lfs installed" || echo "❌ git-lfs is not installed"

  git:config:generator:
    desc: "internal | generate git config"
    requires:
      vars: [ USER_EMAIL, USER_FULL_NAME ]
    cmds:
    - git config --global user.name "{{.USER_FULL_NAME}}"
    - git config --global user.email "{{.USER_EMAIL}}"
    - |
      test -n "{{.USER_SIGNING_KEY}}" && git config --global user.signingkey "{{.USER_SIGNING_KEY}}"
      test -n "{{.USER_SIGNING_KEY}}" && git config --global commit.gpgsign true
    - echo "✅ Git config has been set to:"
    - cat ~/.gitconfig

  git:config:from-repo:
    desc: "internal | configure git"
    summary: |
      Copy git config from repo to local machine
      If git config already exists, it will be backed up to ~/.gitconfig.bak
      If git config link already exists, it will be removed
      If git config is different from repo version, it will be updated
      Show the result git config
    cmds:
    - test -f ~/.config/git/.gitconfig && echo "git config exists"
    - test -f ~/.gitconfig && mv ~/.gitconfig ~/.gitconfig.bak || true
    - test -L ~/.gitconfig && echo "git config link exists" || ln -s ~/.config/git/.gitconfig ~/.gitconfig
    - diff ~/.config/git/.gitconfig ~/.gitconfig && echo "git config is up to date" 
    - cat ~/.gitconfig

  gnupg:
    desc: "internal | install gnupg"
    cmds:
    - brew install gnupg

  gnupg:validate:
    desc: "internal | validate gnupg"
    requires:
      vars: [ USER_SIGNING_KEY ]
    cmds:
    - gpg --version && echo "✅ gnupg installed" || echo "❌ gnupg is not installed"
    - gpg --list-keys | grep -q $USER_SIGNING_KEY && echo "✅ gnupg keys seems valid for user $USER" || echo "❌ gnupg is not valid for user $USER"
    - gpg --list-secret-keys | grep -q $USER_SIGNING_KEY && echo "✅ gnupg seems valid for user $USER" || echo "❌ gnupg is not valid for user $USER"
